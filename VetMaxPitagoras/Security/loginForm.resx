<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>